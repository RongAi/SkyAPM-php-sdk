// Code generated by protoc-gen-go. DO NOT EDIT.
// source: language-agent/JVMMetricsService.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type JVMMetrics struct {
	Metrics               []*JVMMetric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	ApplicationInstanceId int32        `protobuf:"varint,2,opt,name=applicationInstanceId,proto3" json:"applicationInstanceId,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *JVMMetrics) Reset()         { *m = JVMMetrics{} }
func (m *JVMMetrics) String() string { return proto.CompactTextString(m) }
func (*JVMMetrics) ProtoMessage()    {}
func (*JVMMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_84f947edc73ca4ba, []int{0}
}

func (m *JVMMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JVMMetrics.Unmarshal(m, b)
}
func (m *JVMMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JVMMetrics.Marshal(b, m, deterministic)
}
func (m *JVMMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JVMMetrics.Merge(m, src)
}
func (m *JVMMetrics) XXX_Size() int {
	return xxx_messageInfo_JVMMetrics.Size(m)
}
func (m *JVMMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_JVMMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_JVMMetrics proto.InternalMessageInfo

func (m *JVMMetrics) GetMetrics() []*JVMMetric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *JVMMetrics) GetApplicationInstanceId() int32 {
	if m != nil {
		return m.ApplicationInstanceId
	}
	return 0
}

func init() {
	proto.RegisterType((*JVMMetrics)(nil), "skywalking.network.protocol.agent.v1.JVMMetrics")
}

func init() {
	proto.RegisterFile("language-agent/JVMMetricsService.proto", fileDescriptor_84f947edc73ca4ba)
}

var fileDescriptor_84f947edc73ca4ba = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x4d, 0x45, 0x0b, 0xeb, 0x45, 0x03, 0x42, 0xc9, 0xc5, 0x52, 0x44, 0x7a, 0x71, 0xd3,
	0x54, 0x7f, 0x81, 0x78, 0x69, 0xa1, 0x52, 0x5a, 0x50, 0xf0, 0x36, 0xae, 0x43, 0x0c, 0xd9, 0xec,
	0x2c, 0xbb, 0x6b, 0x42, 0xef, 0x9e, 0xfd, 0x21, 0xfe, 0x4a, 0xb1, 0x9b, 0x34, 0x45, 0xa5, 0xf4,
	0xb6, 0xec, 0xbc, 0xf9, 0xde, 0xe3, 0x0d, 0xbb, 0x92, 0xa0, 0xd2, 0x77, 0x48, 0xf1, 0x1a, 0x52,
	0x54, 0x2e, 0x9e, 0x3e, 0xce, 0x66, 0xe8, 0x4c, 0x26, 0xec, 0x12, 0x4d, 0x99, 0x09, 0xe4, 0xda,
	0x90, 0xa3, 0xf0, 0xd2, 0xe6, 0xab, 0x0a, 0x64, 0x9e, 0xa9, 0x94, 0x2b, 0x74, 0x15, 0x99, 0xdc,
	0x4f, 0x04, 0x49, 0xbe, 0x5e, 0xe5, 0x65, 0x12, 0x5d, 0xfc, 0xa2, 0xdd, 0x53, 0xa5, 0xac, 0x33,
	0x08, 0x85, 0x17, 0x47, 0xa7, 0x82, 0x8a, 0x82, 0xd4, 0x8f, 0x8d, 0xff, 0x19, 0x7c, 0x06, 0x8c,
	0xb5, 0xa6, 0xe1, 0x94, 0x75, 0x0b, 0xff, 0xec, 0x05, 0xfd, 0xc3, 0xe1, 0xc9, 0x78, 0xc4, 0x77,
	0x39, 0x7b, 0x1c, 0x2f, 0x13, 0xbe, 0x61, 0x2c, 0x1a, 0x40, 0x78, 0xcb, 0xce, 0x41, 0x6b, 0x99,
	0x09, 0x70, 0x19, 0xa9, 0x89, 0xb2, 0x0e, 0x94, 0xc0, 0xc9, 0x6b, 0xaf, 0xd3, 0x0f, 0x86, 0x47,
	0x8b, 0xff, 0x87, 0xe3, 0x8f, 0x80, 0x9d, 0xfd, 0x69, 0x21, 0x24, 0xd6, 0x15, 0x24, 0x25, 0x0a,
	0x17, 0xee, 0x4e, 0xd4, 0x74, 0xd1, 0x06, 0xb2, 0xd1, 0x9e, 0x1b, 0x6d, 0x5b, 0x83, 0x83, 0xbb,
	0x8a, 0x8d, 0xc8, 0xa4, 0x1c, 0x34, 0x88, 0x37, 0xdc, 0xde, 0x07, 0x5d, 0x6c, 0x18, 0x4d, 0xdd,
	0x9e, 0x31, 0x0f, 0x9e, 0xb7, 0xce, 0x14, 0xd7, 0xa2, 0xb8, 0x11, 0xc5, 0xfe, 0x26, 0x65, 0xf2,
	0xd5, 0x89, 0x96, 0xf9, 0xea, 0xa9, 0xe6, 0x3d, 0x78, 0xd9, 0xbc, 0x8e, 0xf3, 0x72, 0xbc, 0x0e,
	0x76, 0xf3, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x57, 0xa7, 0x28, 0xbd, 0x1a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JVMMetricsServiceClient is the client API for JVMMetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JVMMetricsServiceClient interface {
	Collect(ctx context.Context, in *JVMMetrics, opts ...grpc.CallOption) (*Downstream, error)
}

type jVMMetricsServiceClient struct {
	cc *grpc.ClientConn
}

func NewJVMMetricsServiceClient(cc *grpc.ClientConn) JVMMetricsServiceClient {
	return &jVMMetricsServiceClient{cc}
}

func (c *jVMMetricsServiceClient) Collect(ctx context.Context, in *JVMMetrics, opts ...grpc.CallOption) (*Downstream, error) {
	out := new(Downstream)
	err := c.cc.Invoke(ctx, "/skywalking.network.protocol.agent.v1.JVMMetricsService/collect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JVMMetricsServiceServer is the server API for JVMMetricsService service.
type JVMMetricsServiceServer interface {
	Collect(context.Context, *JVMMetrics) (*Downstream, error)
}

// UnimplementedJVMMetricsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJVMMetricsServiceServer struct {
}

func (*UnimplementedJVMMetricsServiceServer) Collect(ctx context.Context, req *JVMMetrics) (*Downstream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collect not implemented")
}

func RegisterJVMMetricsServiceServer(s *grpc.Server, srv JVMMetricsServiceServer) {
	s.RegisterService(&_JVMMetricsService_serviceDesc, srv)
}

func _JVMMetricsService_Collect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JVMMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JVMMetricsServiceServer).Collect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skywalking.network.protocol.agent.v1.JVMMetricsService/Collect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JVMMetricsServiceServer).Collect(ctx, req.(*JVMMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

var _JVMMetricsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skywalking.network.protocol.agent.v1.JVMMetricsService",
	HandlerType: (*JVMMetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "collect",
			Handler:    _JVMMetricsService_Collect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "language-agent/JVMMetricsService.proto",
}
